# Install k3s on RPI5 8G
#
# 0. Update and Upgrade OS
# 1.First ---> You enable it by simply appending "cgroup_memory=1 cgroup_enable=memory" to /boot/firmware/cmdline.txt
#
# sudo curl -Lo /usr/local/bin/k3s https://github.com/k3s-io/k3s/releases/latest/download/k3s-arm64
# sudo chmod +x /usr/local/bin/k3s
# k3s --version
# Succes response:
return@linux$ k3s --version
k3s version v1.33.1+k3s1 (99d91538)
go version go1.24.2

# Verify if service is active
# sudo ss -tulpn | grep 6444

# run from boot
/etc/systemd/system/k3s.service 
-
[Unit]
Description=Lightweight Kubernetes
After=network.target

[Service]
ExecStart=/usr/local/bin/k3s server
Restart=always
RestartSec=5s

[Install]
WantedBy=multi-user.target
-

sudo systemctl daemon-reload
sudo systemctl enable k3s
sudo systemctl start k3s
sudo systemctl status k3s

# if you don't need any agent
sudo systemctl stop k3s-agent
sudo pkill -f k3s-agent

# after this work command:
sudo kubectl get nodes
sudo kubectl get pods

# create new namespace
sudo k3s kubectl create namespace learning-dev
sudo k3s kubectl get ns

# set default namespace (default for all commands)
sudo k3s kubectl config set-context --current --namespace=learning-dev

# manual
sudo k3s kubectl get pods --namespace=learning-dev

sudo kubectl get pods -n learning-dev
sudo kubectl get all -n learning-dev

# set my app: terminal-messenger: git clone https://github.com/andreireporter13/terminal-messenger.git
git clone

# if docker is istalled
docker build -t terminal-messenger:latest .

# check
docker run -p 8000:8000 terminal-messenger:latest

# verify if its work
http://192.168.100.63:8000/

# Start deply an APP
touch mess_service.yaml
touch mess_deployment.yaml

# Deployment
apiVersion: apps/v1                # API version for Deployment resource
kind: Deployment                  # Defines a Deployment to manage Pods
metadata:
  name: terminal-messenger        # Name of the Deployment
  namespace: learning-dev         # Namespace where this Deployment will be created
spec:
  replicas: 1                    # Number of pod replicas to run
  selector:
    matchLabels:
      app: terminal-messenger    # Label selector to identify pods managed by this Deployment
  template:                      # Pod template used by this Deployment
    metadata:
      labels:
        app: terminal-messenger  # Labels assigned to pods created by this Deployment
    spec:
      containers:
      - name: terminal-messenger # Container name inside the pod
        image: docker.io/library/terminal-messenger:latest # Docker image to use (local image expected)
        imagePullPolicy: Never
        ports:
        - containerPort: 8000    # Container port exposed inside the pod

# Service
apiVersion: v1                      # API version for Service resource
kind: Service                      # Defines a Service to expose the Deployment
metadata:
  name: terminal-messenger          # Name of the Service
  namespace: learning-dev           # Namespace for the Service, same as Deployment
spec:
  selector:
    app: terminal-messenger        # Selects pods with this label to route traffic to
  ports:
  - protocol: TCP                  # Protocol used by the Service port
    port: 8000                    # Port exposed by the Service (inside the cluster)
    targetPort: 8000              # Port on the container to forward traffic to
  type: NodePort                  # Service type exposes port on each node on a random port (30000-32767)

# Ingress
# apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terminal-messenger-ingress           # Name of the Ingress resource
  namespace: learning-dev                      # Namespace where the Ingress is deployed
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"   # Increase read timeout to keep websocket alive
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"   # Increase send timeout for the same reason
    nginx.ingress.kubernetes.io/enable-websocket: "true"    # Enable websocket support in NGINX ingress
spec:
  rules:
  - host: terminalmessenger.local              # Hostname to route traffic for this ingress
    http:
      paths:
      - path: /                               # Match all paths starting with '/'
        pathType: Prefix                      # Use prefix matching for paths
        backend:
          service:
            name: terminal-messenger          # Service name to forward traffic to
            port:
              number: 8000                    # Port exposed by the service to target

# setup
sudo kubectl apply -n learning-dev -f mess_deployment.yaml
sudo kubectl apply -n learning-dev -f mess_service.yaml
sudo kubectl apply -n learning-dev -f mess_ingress.yaml

# delete
sudo kubectl delete -n learning-dev -f mess_ingress.yaml
sudo kubectl delete -n learning-dev -f mess_service.yaml
sudo kubectl delete -n learning-dev -f mess_deployment.yaml

# sudo kubectl delete deployment terminal-messenger -n learning-dev
# sudo kubectl apply -f mess_deployment.yaml -n learning-dev

# Save docker image locally
# sudo docker save terminal-messenger:latest -o terminal-messenger.tar
# sudo ctr -n k8s.io image import terminal-messenger.tar
#
# # search it
# sudo ctr -n k8s.io images ls | grep terminal-messenger

# import image direct in k3s
# sudo ctr --address /run/k3s/containerd/containerd.sock -n k8s.io images import terminal-messenger.tar

# restart k3s
sudo systemctl restart k3s

# if something didn't work, use this
sudo systemctl stop k3s-agent.service
sudo kill 1021

sudo systemctl restart k3s.service
